irisv2.is.starting=----       IRISv2 \u0437\u0430\u043F\u0443\u0441\u043A\u0430\u0435\u0442\u0441\u044F       ----
status.got.status.answer.from.0=[status] Got status answer from {0}
iris.devices.service.starting=[iris] Devices service starting
zwave.zwave.support.is.enabled.starting=[zwave] ZWave support is enabled. Starting.
1.wire.1.wire.support.is.enabled.starting=[1-wire] 1-wire support is enabled. Starting.
devices.got.status.query=[devices] Got status query
not.set=not set
unknown=unknown
zwave=zwave
none.set=none set
undefined=undefined
none=none
zwave.load.device.0.1.from.database=[zwave] Load device "{0}/{1}" from database
zwave.driver.ready.home.id.0=[zwave] Driver ready, home id: {0}
zwave.driver.failed=[zwave] Driver failed
zwave.driver.reset=[zwave] Driver reset
zwave.awake.nodes.queried=[zwave] Awake nodes queried
zwave.all.nodes.queried=[zwave] All nodes queried
zwave.all.nodes.queried.some.dead=[zwave] All nodes queried some dead
zwave.polling.enabled=[zwave] Polling enabled
zwave.polling.disabled=[zwave] Polling disabled
zwave.update.info.for.node.0=[zwave] Update info for node {0}
zwave.unassigned.value.node.0.type.1.class.2.genre.3.label.4.value.5.index.6.instance.7=[zwave] Unassigned value! Node: {0}, Type: {1}, Class: {2}, Genre: {3}, Label: {4}, Value: {5}, Index: {6}, Instance: {7}
zwave.error.while.save.value.remove.cannot.find.device.with.node.id.0=[zwave] Error while save value remove. Cannot find device with Node ID: {0}
zwave.node.0.value.1.removed=[zwave] Node {0}: Value "{1}" removed
zwave.error.while.save.value.change.cannot.find.device.with.node.id.0=[zwave] Error while save value change. Cannot find device with Node ID: {0}
zwave.node.0.value.for.label.1.changed.2.3=[zwave] Node {0}: Value for label "{1}" changed: {2} --> {3}
value.refreshed.node.id.0.command.class.1.instance.2.index.3.value.4=Value refreshed! node id: {0} command class: {1} instance: {2} index: {3} value: {4}
zwave.waiting.ready.state.from.zwave=[zwave] Waiting ready state from zwave
zwave.still.waiting=[zwave] Still waiting
zwave.initialization.complete.found.0.device.s=[zwave] Initialization complete. Found {0} device(s)
zwave.cannot.find.device.with.uuid.0=[zwave] Cannot find device with UUID: {0}
zwave.setting.level.0.on.uuid.1.node.2=[zwave] Setting level {0} on UUID {1} (Node {2})
zwave.enabling.uuid.0.node.1=[zwave] Enabling UUID {0} (Node {1})
zwave.disabling.uuid.0.node.1=[zwave] Disabling UUID {0} (Node {1})
zwave.enabling.all=[zwave] Enabling all
zwave.disabling.all=[zwave] Disabling all
zwave.unknown.command.0=[zwave] Unknown command "{0}"
zwave.get.error.0=[zwave] Get error! {0}
not.responding=Not responding
listening=Listening
zwave.add.device.to.array.0.1=[zwave] Add device to array - {0}/{1}
zwave.add.value.to.device.0.1=[zwave] Add value to device: {0} --> {1}
msg.create.amqp.connection.and.session=[msg] Create AMQP connection and session
msg.done.init=[msg] Done init
msg.disconnect.amqp.connection.session.etc=[msg] Disconnect AMQP connection, session, etc...
error.failed.speak.0=[error] Failed speak: {0}
sql.cant.open.connection.to.h2.database=[sql] Cant open connection to H2 database!
sql.error.while.loading.db.driver=[sql] Error while loading DB driver
iris.events.engine.starting=[iris] Events engine starting...
events.got.status.query=[events] Got status query
iris.record.service.starting=[iris] Record service starting
record.got.status.query=[record] Got status query
rest.got.status.query=[rest] Got status query
rest.get.device.get.0=[rest] Get /device/get/{0}
rest.get.cmd.0=[rest] Get /cmd/{0}
module.error.at.loading.module.0.with.params.1=[module] Error at loading module {0} with params "{1}"!
done=done
rest.get.speak.0=[rest] Get /speak/{0}
rest.got.0.command=[rest] Got "{0}" command
rest.enable.0.device=[rest] Enable {0} device
rest.disable.0.device=[rest] Disable {0} device
rest.set.level.0.on.1.device=[rest] Set level {0} on {1} device
rest.switch.all.devices.to.0.state=[rest] Switch all devices to {0} state
rest.get.status.module.0=[rest] Get /status/module/{0}
rest.get.status.module.all=[rest] Get /status/module/all
iris.scheduler.starting=[iris] Scheduler starting...
scheduler.got.status.query=[scheduler] Got status query
scheduler.create.new.task.instance.with.id.0=[scheduler] Create new task instance with ID [{0}]
scheduler.create.task.instance.from.id.0=[scheduler] Create task instance from ID [{0}]
scheduler.saving.task.0=[scheduler] Saving task [{0}]
scheduler.service.starting=[scheduler] Service starting
scheduler.actualize.task.time.next.run.at.0=[scheduler] Actualize task time! Next run at [{0}]
scheduler.actualize.task.time.set.task.to.disable=[scheduler] Actualize task time! Set task to disable
scheduler.actualize.task.time.next.run.at.01=[scheduler] Actualize task time! Next run at [{0}]
scheduler.actualize.task.time.skip.task=[scheduler] Actualize task time! Skip task
scheduler.error.at.actualizing.tasks=[scheduler] Error at actualizing tasks!
scheduler.executing.task.0.1.2=[scheduler] Executing task [{0}] {1} ({2})
scheduler.next.run.at.0=[scheduler] Next run at [{0}]
scheduler.set.task.to.disable=[scheduler] Set task to disable
scheduler.no.scheduled.tasks=[scheduler] No scheduled tasks!
iris.speak.service.starting=[iris] Speak service starting
syth.voice.launched=\u041C\u043E\u0434\u0443\u043B\u044C \u0441\u0438\u043D\u0442\u0435\u0437\u0430 \u0440\u0435\u0447\u0438 \u0413\u0443\u0433\u043B \u0437\u0430\u043F\u0443\u0449\u0435\u043D
voice.synth.voicerss.launched=\u041C\u043E\u0434\u0443\u043B\u044C \u0441\u0438\u043D\u0442\u0435\u0437\u0430 \u0440\u0435\u0447\u0438 VoiceRSS \u0437\u0430\u043F\u0443\u0449\u0435\u043D
speak.no.tts.system.specified.in.config.file=[speak] No TTS system specified in config file!
speak.got.status.query=[speak] Got status query
speak.service.started.tts.google=[speak] Service started (TTS: Google)
speak.confidence.0=[speak] Confidence: {0}
speak.text.0=[speak] Text: {0}
speak.silence.mode.enabled.ignore.speak.request=[speak] Silence mode enabled! Ignore speak request
speak.get.error.0=[speak] Get error! {0}
percent=\ \u043F\u0440\u043E\u0446\u0435\u043D\u0442
and=\ \u0438
plus=\ \u043F\u043B\u044E\u0441
voice.could.not.load.audio.driver=[voice] Could not load audio driver
speak.service.started.tts.voicerss=[speak] Service started (TTS: VoiceRSS)
speak.confidence.01=[speak] Confidence: {0}
speak.text.01=[speak] Text: {0}
speak.silence.mode.enabled.ignore.speak.request1=[speak] Silence mode enabled! Ignore speak request
speak.get.error.01=[speak] Get error! {0}
switchcontol.switch.all.devices.to.on.state=[switchcontol] Switch all devices to ON state
switchcontol.switch.all.devices.to.off.state=[switchcontol] Switch all devices to OFF state
record.service.started=[record] Service started
record.configured.to.run.0.threads.on.1.microphones=[record] Configured to run {0} threads on {1} microphones
record.start.thread.0.on.microphone.1=[record] Start thread {0} on microphone {1}
data.utterance.0=[data] Utterance : {0}
data.confidence.level.0=[data] Confidence Level: {0}
command.system.is.busy.skipping=[command] System is busy. Skipping.
command.got.0.command=[command] Got "{0}" command
module.error.at.loading.module.0.with.params.11=[module] Error at loading module {0} with params "{1}"!
record.system.name.detected=[record] System name detected!
record.server.found.exec.command=[record] Server found exec command
iris.video.module.started=[iris]       Video module started